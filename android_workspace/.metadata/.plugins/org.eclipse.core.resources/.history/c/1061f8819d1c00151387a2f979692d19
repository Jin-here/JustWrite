package com.example.testandroid74;

import java.io.IOException;
import java.util.ArrayList;

import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpResponseException;
import org.ksoap2.transport.HttpTransportSE;
import org.xmlpull.v1.XmlPullParserException;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;

public class BaseThread extends Thread {

	private Handler mHandler;
	private String city;

	public BaseThread(Handler mHandler,String city) {
		// TODO Auto-generated constructor stub
		this.city = city;
		this.mHandler = mHandler;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		super.run();
		try {
			String back = getWeatherInfo();
			Message msg = mHandler.obtainMessage();
			msg.what = 0x11;
			Bundle data = new Bundle();
			data.putString("data", back);
			msg.setData(data);
			mHandler.sendMessage(msg);
			
		} catch (HttpResponseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (XmlPullParserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private String getWeatherInfo() throws HttpResponseException, IOException, XmlPullParserException {
		// getWeather()方法参数
		String para01 = "hello";
		String para02 = "theUserID";
		// 命名空间
		String nameSpace = "http://inter.webservice.example.com/";
		// 调用的方法名称
		String methodName = "hello";
		// EndPoint
		String endPoint = "http://192.168.1.103:7777/mypublish";
		// SOAP Action
		String soapAction = nameSpace + methodName;
		System.out.println(soapAction);

		// 指定WebService的命名空间和调用的方法名
		SoapObject rpc = new SoapObject(nameSpace, methodName);

		// 设置需调用WebService接口需要传入的两个参数mobileCode、userId
		rpc.addProperty(para01, city);

		// 生成调用WebService方法的SOAP请求信息,并指定SOAP的版本
		SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);

		envelope.bodyOut = rpc;
		// 设置是否调用的是dotNet开发的WebService
		envelope.dotNet = true;
		// 等价于envelope.bodyOut = rpc;
		// envelope.setOutputSoapObject(rpc);

		HttpTransportSE transport = new HttpTransportSE(endPoint);

		// 调用WebService

		transport.call(null, envelope);

		// 获取返回的数据
		Object object = envelope.bodyIn;
		// 获取返回的结果
		String result = object.toString();
		System.out.println(result);
		return result;
	}

}
