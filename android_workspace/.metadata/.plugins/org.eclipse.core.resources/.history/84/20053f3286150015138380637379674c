package android_serialport_api;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;










import com.example.config.ServerApp;
import com.example.socket.HexTransform;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;

public class ZigbeeAdapter extends SerialPortActivity {


	final static int FRAME_START_UP = 0xA5;
	final static int FRAME_START_DOWN = 0xAC;
	final static int COMMAND_HANDSHAKE = 0xAA;
	final static int COMMAND_DATABRIDGE = 0xDA;
	final static int COMMAND_DEVICE_REPORT = 0xFD;
	final static int COMMAND_RESET = 0xFE;
	final static int COMMAND_SUBDEVICE_INFO = 0xF4; 
	final static int COMMAND_HANDSHAKE_ANSWER = 0xAD; 
		
	final static int ZD_READ = 0x01;
	final static int ZD_ACT = 0x03;
	
	private static int loc = 0;	 
	private static byte[] RcvBuf; 
	
	private static int actNum = 0; 
	byte[] actsAddr;
	byte[] sensorAddr; 


	final static int SENSORDEVMSG = 1;	
	final static int ACTDEVMSG = 2;  
	
	public static Handler myhandler = null;
	
	public static Context mContext=null;
		
	public ZigbeeAdapter(Handler handler,Context iContext){
	
		myhandler = handler;
		mContext=iContext;
	
		RcvBuf = new byte[2048];
		actsAddr = new byte[2];
		sensorAddr = new byte[2];
	}

	public void initSerial(String dev,int baudrates){
	
		openSerial(new File(dev), baudrates);
	}
	
	public void closeSerial(){
		try {
			closeSerialPort();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	//发送数据
	public  void senddatatoSerial(byte[] buffer){
		try 
		{
			System.out.println("服务器toARM2："+HexTransform.bytesToHexString(buffer));
			mOutputStream.write(buffer);
//			if(dogThread==null){dogThread=new DogThread(); dogThread.start(); 
//			System.out.println("时间狗开启");
//			}
//			feed=false;
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public void devHands()
	{	
		//20 05 0008 FF00 0B49
		byte[] cmdBuf;
		cmdBuf = new byte[8];
		int i=0;
		cmdBuf[i++] = (byte)0x20;
		cmdBuf[i++] = (byte)0x05;
		cmdBuf[i++] = (byte)0x00;
		cmdBuf[i++] = (byte)0x00;
		cmdBuf[i++] = (byte)0xff;
		cmdBuf[i++] = (byte)0x00;
		//cmdBuf[i++] = (byte)0x0B;
		//cmdBuf[i++] = (byte)0x49;
		
		CRC CRC  = new CRC();
		byte[] crc = CRC.CRC16(cmdBuf,6);
		cmdBuf[i++] =crc[0];
		cmdBuf[i++] =crc[1];
		
    	try 
		{
			mOutputStream.write(cmdBuf);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@Override
	protected void onDataReceived(final byte[] buffer, final int size) {
		
			if (size > 0) {
		System.out.println("ARMto服务器："+HexTransform.bytesToHexString(buffer));
				System.arraycopy(buffer, 0, RcvBuf, loc, size);
				loc += size;
				controllerRecieveData(RcvBuf, loc);
				if (loc > 1024) {
					loc = 0;
				}
			}
		}
	
    
	private void controllerRecieveData(byte[] buffer, int size) {
		System.out.println("ARMto服务器3333："+HexTransform.bytesToHexString(buffer));
		int len = 1024;
		if(len < buffer.length+1) len = buffer.length+1;
		///////////////////////////////////////////
		byte[] Buf = new byte[len];
		System.arraycopy(buffer, 0, Buf, 0, size);
		int machineState = 0;
		int cmdBegin = 0;
		int datalen = size;
		
	
		byte sbuf[] = new byte[size];
		System.arraycopy(buffer, 0, sbuf, 0,size);
//		System.arraycopy(buffer, 0, ServerApp.bulasuobyte, 0,size);
//		System.out.println("ARMto服务器bulasuobyte"+HexTransform.bytesToHexString(ServerApp.bulasuobyte));
		System.out.println("ARMto服务器subf："+HexTransform.bytesToHexString(sbuf));
		
		byte Addr,Fun,Len,Data;
		byte[] Crc=new byte[2];
		//modbus
		Addr=sbuf[0];
		Fun =sbuf[1];
		
	
			
		if (Fun==1)
		  if(datalen<6) return;
		if (Fun==5)
		  if(datalen<8) return;
		if (Fun==3)
		  if(datalen<29) return;
		
		
		String dataStr = ZigbeeAdapter.Bytes2HexString(sbuf);
		System.out.println("ARM2服务器："+dataStr);
		
		loc = 0;
		
		//发消息
		Message message = new Message();
		message.what = 1;
		
		Bundle bundle = new Bundle();
		bundle.putString("type", "receive");
		bundle.putString("data", dataStr);
		message.setData(bundle);
		myhandler.sendMessage(message);
		
		//广播写日志
		StringBuffer nbuffer = new StringBuffer();
		nbuffer.append("[COM]");
		nbuffer.append("[Modbus]"); //add communication type and protocol type
		nbuffer.append("[admin]");	//add user name
		nbuffer.append("[control]"); //add action name
		nbuffer.append("[receive]"); //add action name
		nbuffer.append("["+dataStr+"]"); // and log message
		String showLog =nbuffer.toString();				
		Intent intenta = new Intent("com.example.netserver.broadcat.saveLog");
		intenta.putExtra("log_message", showLog);
		mContext.sendBroadcast(intenta);
		
		return;
	
	}
	


	
	
///////////////////////////////////////////////////////////////////////
public static class CRC { 
public byte[]  CRC16(byte[] cmd, int j)
{
	short[] auchCRCHi =new short[]{
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
	} ;
	
	short[] auchCRCLo =new short[]{
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 
	0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 
	0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 
	0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 
	0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 
	0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 
	0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 
	0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 
	0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 
	0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 
	0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 
	0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 
	0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 
	0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 
	0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 
	0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 
	0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 
	0x43, 0x83, 0x41, 0x81, 0x80, 0x40
	} ;
	
	short uchCRCHi = 0xFF ;	/* high CRC byte initialized */
	short uchCRCLo = 0xFF ;	/* low CRC byte initialized  */
	short uIndex ;			/* will index into CRC lookup*/
	short tempCs;
	short i;
	i=0;
	while (j!=0)		/* pass through message buffer*/
	{
		j--;
		// uIndex = (short) (uchCRCHi ^(short) cmd[i]) ;	/* calculate the CRC*/
		uIndex = (short)((uchCRCHi ^(short) cmd[i])&0xff) ;	/* calculate the CRC*/
		uchCRCHi = (short) (uchCRCLo ^ auchCRCHi[uIndex]) ;
		uchCRCLo = auchCRCLo[uIndex] ;
		i++;
	}
	
	tempCs=(short) (uchCRCHi << 8 | uchCRCLo) ;

	byte[] bytes = new byte[2];
	for (i = 1; i >= 0; i--)
	{
	bytes[i] = (byte)(tempCs% 256);
	tempCs >>= 8;
	}
	return bytes;

}
}
public final static byte[] hex = "0123456789ABCDEF".getBytes();

public static String Bytes2HexString(byte[] bb) 
{
    int i,len;
    len=bb.length;
    byte[] b=new byte[len];
    for (i=0;i<len;i++)
    	b[i]=bb[len-i-1];

	byte[] buff = new byte[2 * b.length];

	for ( i = 0; i < b.length; i++) {

		buff[2 * i] = hex[(b[b.length - i - 1] >> 4) & 0x0f];
		buff[2 * i + 1] = hex[b[b.length - i - 1] & 0x0f];
	}
	return new String(buff);
}
public static byte[] string2bytes(String s){
	String ss = s.replace(" ", "");
	int string_len = ss.length();
	int len = string_len/2;
	if(string_len%2 ==1){
	ss = "0"+ss;
	string_len++;
	len++;
	}
	byte[] a = new byte[len];
	for(int i=0;i<len;i++){
	a[i] = (byte)Integer.parseInt(ss.substring(2*i,2*i+2), 16);
	}
	return a;
	}

}

