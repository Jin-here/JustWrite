package com.example.socket;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

import org.json.JSONException;
import org.json.JSONObject;

import com.example.config.ServerApp;
import com.example.dbs.DatabaseUtil;
import com.example.dbs.User;
import com.example.server.SerialportService;

import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.util.Base64;
import android.util.Log;
import android.widget.Toast;
import android_serialport_api.ZigbeeAdapter;
import android_serialport_api.ZigbeeAdapter.CRC;

public class SocketServerThread extends Thread 
{
	
	private static final String TAG = "SocketServerThread";
	private Context mContext;
	private ServerSocket mSever;//服务器socket
	private Socket bulasuoSocket;
	private boolean mLogEnable = true; //日志开关
	private volatile boolean mIsRun = true; //线程控制开关
	private BufferedReader reader;
	private String myreader;
	//private byte[] sData=new byte[120];//数据组
 	private byte[] AllData=new byte[255];//数据组
 	private int AllLen = 0;
	boolean state;
	
	private ArrayList<Socket> weichuli = new ArrayList<Socket>();
	private ArrayList<Socket> chuli = new ArrayList<Socket>();

	public SocketServerThread(Context context, int port, boolean logEnable)
	{
		
		mContext = context;
		
		try
		{
			mSever = new ServerSocket(port); //创建服务器socket
			mLogEnable = logEnable;
			mIsRun = true;
        }catch(IOException e){
            e.printStackTrace();
        }
	}
	
	@Override
	public void run() 
	{
		super.run();
		while (mIsRun){
			/*SerialportService.SetRecSocket(client);
			if(mLogEnable){
         		   Log.d(TAG,"socket accept:"+client.getInetAddress().toString());
          	}
			int rlRead = 0;
			if(rlRead>0)
			{
				rlRead= unpackageCmd(sData,rlRead);
				if (rlRead>0)
				{
					SerialportService.SetRecSocket(client);
					
				}
				

			}*/
			
		}
	}
	
	//处理数据
	public int unpackageCmd(byte[] cmd,int len)
	{
		int i;
		int size=len;
		if(size<=0) return 0;	
		for(i=0;i<size;i++)
		{
			  AllData[AllLen]=cmd[i];
			  AllLen++;
		}
		byte Addr,Fun,Len,Data;
		byte[] Crc=new byte[2];
		byte[] crc =new byte[2];

		//modbus
		Addr=AllData[0];
		Fun =AllData[1];
		
		if (Fun==1)
		  if(AllLen<6) return 0;
		if (Fun==5)
		  if(AllLen<8) return 0;
		
		 if(AllLen>30) 
		 {
			 AllLen=0;
			 return 0;
		 }
		Crc[0]=AllData[AllLen-2];
		Crc[1]=AllData[AllLen-1];
	    CRC CRC  = new CRC();
	    crc = CRC.CRC16(AllData,AllLen-2);
	    
		byte[] Senddata=new byte[AllLen];
		String CSenddata;
		
//	    if ((Crc[0]==crc[0])&&(Crc[1]==crc[1]))
//	   {
	    	System.arraycopy(AllData, 0, Senddata, 0,AllLen);
	    	CSenddata=ZigbeeAdapter.Bytes2HexString(Senddata);
	    	
	    	System.out.println("客户端2222："+CSenddata);
//	    	if(CSenddata.equals("01030000000C45CF")){
//	    		
//	    		try {
//					bulasuoSocket.getOutputStream().write(ServerApp.bulasuobyte);
//				} catch (IOException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//	    		System.out.println("服务器2客户端："+HexTransform.bytesToHexString(ServerApp.bulasuobyte));
//	    	}
	    	controlDevice(CSenddata);
	    	AllLen=0;
	    	return 1;
	    	
//	    }
		//return 0;
   }
	//向串口service发送广播,控制外设的开启与关闭
	private void controlDevice(String CSenddata)
	{
		Intent intent = new Intent("com.example.serialportserver.broadcat.sendtoserialport");
		intent.putExtra("message", "modbus");
		intent.putExtra("data", CSenddata);
		intent.putExtra("socket", "1");
		mContext.sendBroadcast(intent);
	}
	//停止服务器端server
	public void stopServer()
	{
		mIsRun = false;
		try {
			mSever.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
}



