package com.example.server;

import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import com.example.config.ServerApp;
import com.example.mycomm.MainActivity;
import com.example.socket.HexTransform;

import android.R.integer;
import android.annotation.SuppressLint;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.util.Log;
import android_serialport_api.ZigbeeAdapter;

public class SerialportService extends Service 
{
	private static final String TAG = "SerialportService";
	private ServerApp mApp;
	private Context mContext;
	public static boolean ifSIMULATE = false;
	//public static Socket sendtoClientSocket=null;
	
	private static ArrayList<Socket> sockets = new ArrayList<Socket>();
	private int dataLen;
	private static byte[] Senddata;
	
	
//	private static ArrayList<Sensor> gSensorList = new ArrayList<Sensor>(); //浼犳劅鍣ㄦ暟缁?
//	private static ArrayList<Controller> gControllerList = new ArrayList<Controller>(); //鎺у埗鍣ㄦ暟缁?
	
	private MyHandler handler = null;
	private ZigbeeAdapter adapter;
	private Timer timer;

	private SendToSerialportServiceBroadcast mBroadcast;
	public static Date mStartTime;
	
	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	@SuppressWarnings("deprecation")
	@Override
	public void onStart(Intent intent, int startId) {
		super.onStart(intent, startId);
		try {
			
			//mApp = (ServerApp)getApplication();

			handler = new MyHandler();
		
			 mContext =getApplicationContext();
			adapter = new ZigbeeAdapter(handler,mContext);
		
			adapter.initSerial(MainActivity.devices[MainActivity.chose], 9600);
		
			adapter.devHands();

		
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("gdevHands...,waiting for device address. ");

		timer = new Timer();
	//	timer.schedule(new CO2SensorTask(), 1000, 1000);
		System.out.println("Serial Service Started. ");
	}

	@Override
	public void onCreate() {
		super.onCreate();

		mBroadcast = new SendToSerialportServiceBroadcast();
		IntentFilter intentFilter = new IntentFilter();  
        intentFilter.addAction("com.example.serialportserver.broadcat.sendtoserialport");  
        registerReceiver(mBroadcast, intentFilter); 
	}
	//设
	public static void SetRecSocket(Socket socket) 
	{
		//sendtoClientSocket =socket;
		sockets.add(socket);
	}
	
	//客户端登入事件服务器端要返回一个user对象给客户端
	

	@Override
	public void onDestroy() {
		super.onDestroy();

		if (timer != null) {
			timer.cancel();
		}
		adapter.closeSerial();
		if(mBroadcast!=null)
		{
			unregisterReceiver(mBroadcast);
		}
		Log.d(TAG,"Serial Service Stopped.");
	}


	@SuppressLint("HandlerLeak")
	public final class MyHandler extends Handler 
	{
		public void handleMessage(Message msg) 
		{

			switch (msg.what) 
			{
			case 1:
				// 获取外接多个传感模块地址，用于后续对该模块进行数据请求
				String typeStr = msg.getData().getString("type"); 
				String recdata = msg.getData().getString("data");
				
				System.out.println("服务器to客户端："+recdata);
				if(typeStr!=null)
				{
					if (sendtoClientSocket!=null)
					{
						dataLen=recdata.length()/2;
						Senddata = new byte[dataLen];
						Senddata=ZigbeeAdapter.string2bytes(recdata);
		
					    if (sockets.size() != 0){
							
						}
						   /*OutputStream out = sendtoClientSocket.getOutputStream();
						   out.write(Senddata);
						   out.flush();*/
						      
					   

					}
				
				}
				
				break;
			
			case 2:
				
				break;
			default:
				
				break;
			}
		}
	};
	
	
	public void threadWait()
	{
		try {
			Thread.sleep(500);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	//广播发送
	class SendToSerialportServiceBroadcast extends BroadcastReceiver
	{
		@Override
		public void onReceive(Context context, Intent intent) 
		{
			String message = intent.getStringExtra("message");
			String data = intent.getStringExtra("data");
			int isOpen = intent.getIntExtra("isOpen", -1); //0 close control, 1 open control
			Log.d(TAG,"Broadcast recevie : "+message+","+ data+","+isOpen);
			
			int dataLen=data.length()/2;
			byte Senddata[] = new byte[dataLen];
			Senddata=ZigbeeAdapter.string2bytes(data);
			if(message.equals("modbus"))
			{
				System.out.println("服务器toARM："+HexTransform.bytesToHexString(Senddata));
				adapter.senddatatoSerial(Senddata);
				
			}
		}
	}
}
