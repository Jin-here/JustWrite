package com.gaw.garbage.db;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.gaw.garbage.bean.Garbage;
import com.gaw.garbage.config.Config;

public class MySQLiteHelper extends SQLiteOpenHelper {

	public MySQLiteHelper(Context context) {
		super(context, Config.DB_NAME, null, Config.DB_VERSION);
		// TODO Auto-generated constructor stub
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		// TODO Auto-generated method stub
		db.execSQL(Config.CREATE_FUCK00_TABLE);
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// TODO Auto-generated method stub

	}

	private Garbage garbage = new Garbage();
	/**
	 * 获取左边一个草稿
	 * select * from tablename where time>nowTime order by time asc limit 0 1;
	 * @return
	 */
	public Garbage getLeftGarbage(long nowTime){
		SQLiteDatabase db = getReadableDatabase();
		Cursor c = db.query(Config.TABLE_NAME, null, "limit 1 offset (select count(*)-1 from " + Config.TABLE_NAME + ")", null, null, null, null);
		if (c == null){
			Log.e("getleftgarbage--", "null");
			return null;
		}
		if (c.getCount() > 1){
			Log.e("getleftgarbage--", "count>1");
			return null;
		}
		while (c.moveToNext()){
			garbage.setId(c.getLong(c.getColumnIndex(Config._ID)));
			garbage.setFilename(c.getString(c.getColumnIndex(Config.FILENAME)));
			garbage.setHasFile(c.getShort(c.getColumnIndex(Config.HASFILE))==1?true:false);
			garbage.setBrief(c.getString(c.getColumnIndex(Config.BRIEF)));
			garbage.setContext(c.getString(c.getColumnIndex(Config.CONTEXT)));
			garbage.setTime(c.getLong(c.getColumnIndex(Config.TIME)));
		}
		return garbage;
	}
	
	/**
	 * 获取右边一个草稿
	 * select * from tablename where time<nowTime order by time desc limit 0 1;
	 * @return
	 */
	public Garbage getRightGarbage(long nowTime){
		return null;
	}
	
	/**
	 * 添加新草稿
	 * @param garbage
	 */
	public void addGarbage(Garbage garbage){
		ContentValues mCV = new ContentValues();
		mCV.put(Config.FILENAME, garbage.getFilename());
		mCV.put(Config.HASFILE, garbage.isHasFile());
		mCV.put(Config.BRIEF, garbage.getBrief());
		mCV.put(Config.CONTEXT, garbage.getContext());
		mCV.put(Config.TIME, garbage.getTime());
		
		SQLiteDatabase db = getWritableDatabase();
		db.insert(Config.TABLE_NAME, null, mCV);
	}
	
	/**
	 * 修改草稿
	 * @param garbage
	 */
	public void updateGarbage(Garbage garbage){
		ContentValues mCV = new ContentValues();
		mCV.put(Config.FILENAME, garbage.getFilename());
		mCV.put(Config.HASFILE, garbage.isHasFile());
		mCV.put(Config.BRIEF, garbage.getBrief());
		mCV.put(Config.CONTEXT, garbage.getContext());
		mCV.put(Config.TIME, garbage.getTime());
		
		SQLiteDatabase db = getWritableDatabase();
		db.update(Config.TABLE_NAME, mCV, Config._ID + "=" + garbage.getId(), null);
	}
}
