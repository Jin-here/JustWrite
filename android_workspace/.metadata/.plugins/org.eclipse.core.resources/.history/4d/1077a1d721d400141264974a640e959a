package com.timefk.aiweibo.dao;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;

import com.example.db.DBHelper;
import com.example.db.DBInfo;
import com.example.pojo.User;

public class UserDao {
	private DBHelper dbHelper = null;
	private SQLiteDatabase db = null;
	private ContentValues values = null;
	/**
	 * User���ֶ�
	 */
	String[] columns = {DBInfo.Table._ID,DBInfo.Table.USER_ID,DBInfo.Table.USER_NAME,
			DBInfo.Table.TOKEN,DBInfo.Table.TOKEN_SECRET,DBInfo.Table.DESCRIPTION,
			DBInfo.Table.USER_HEAD};
	public UserDao(Context context){
		dbHelper = new DBHelper(context);
	}
	/**
	 * �����û�
	 * @param user
	 * @return
	 */
	public long insertUser(User user){
		//���SQLiteDatebase������ݿ����
		db = dbHelper.getWritableDatabase();
		//�󶨲������
		values = new ContentValues();//HashMap
		values.put(DBInfo.Table.USER_ID, user.getUser_id());
		values.put(DBInfo.Table.USER_NAME, user.getUser_name());
		values.put(DBInfo.Table.TOKEN, user.getToken());
		values.put(DBInfo.Table.TOKEN_SECRET, user.getToken_secret());
		values.put(DBInfo.Table.DESCRIPTION, user.getDescription());		
		//��ͼƬ���͵���ݽ��д洢��ʱ����Ҫ����ת�����ܴ洢��BLOB������
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		BitmapDrawable newHead = (BitmapDrawable)user.getUser_head();
		newHead.getBitmap().compress(CompressFormat.PNG, 100, os);		
		
		values.put(DBInfo.Table.USER_HEAD, os.toByteArray());
		//ִ�в������
		long rowId = db.insert(DBInfo.Table.USER_TABLE, DBInfo.Table.USER_NAME, values);
		db.close();
		return rowId;
	}
	/**
	 * �����û�
	 * @param user
	 * @return
	 */
	public int updateUser(User user){
		return 1;
	}
	/**
	 * ����û�IDɾ���Ӧ�û����
	 * @param user_id
	 * @return
	 */
	public int deleteUser(String user_id){
		return 1;
	}
	/**
	 * ����û�ID����û���Ϣ
	 * @param user_id
	 * @return
	 */
	public User findUserByUserId(String user_id){
		return null;
	}
	
	
	/**
	 * ��������û����
	 * @return
	 */
	public List<User> findAllUsers(){
		//���SQLiteDatebase������ݿ����
		db = dbHelper.getReadableDatabase();
		List<User> userList = null;
		User user = null;
		Cursor cursor = db.query(DBInfo.Table.USER_TABLE, columns, null, null, null, null, null);
		if (cursor != null && cursor.getCount() > 0){
			userList = new ArrayList<User>(cursor.getCount());
			while (cursor.moveToNext()){
				user = new User();
				user.setId(cursor.getLong(cursor.getColumnIndex(DBInfo.Table._ID)));
				user.setUser_id(cursor.getString(cursor.getColumnIndex(DBInfo.Table.USER_ID)));
				user.setUser_name(cursor.getString(cursor.getColumnIndex(DBInfo.Table.USER_NAME)));
				user.setToken(cursor.getString(cursor.getColumnIndex(DBInfo.Table.TOKEN)));
				user.setToken_secret(cursor.getString(cursor.getColumnIndex(DBInfo.Table.TOKEN_SECRET)));
				user.setDescription(cursor.getString(cursor.getColumnIndex(DBInfo.Table.DESCRIPTION)));
				
				
				byte[] byteHead = cursor.getBlob(cursor.getColumnIndex(DBInfo.Table.USER_HEAD));
				ByteArrayInputStream is = new ByteArrayInputStream(byteHead);
				Drawable userHead = Drawable.createFromStream(is, "image");
				user.setUser_head(userHead);
				
				userList.add(user);
			}
		}
		cursor.close();
		db.close();
		
		return userList;
	}
}
